/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    clamp
    {
        type triSurfaceMesh;
        file "clamp.stl";

        regions
        {
            clamp_cover { name outlet; }
            clamp_pipe  { name pipe; }
//            clamp_porous{ name clamp_porous; }
            ground      { name ground; }
            north       { name north; }
            south       { name south; }
            inlet_n1    { name inlet_n1; }
            inlet_n2    { name inlet_n2; }
            inlet_n3    { name inlet_n3; }
            inlet_n4    { name inlet_n4; }
            inlet_n5    { name inlet_n5; }
            inlet_n6    { name inlet_n6; }
            inlet_s1    { name inlet_s1; }
            inlet_s2    { name inlet_s2; }
            inlet_s3    { name inlet_s3; }
            inlet_s4    { name inlet_s4; }
            inlet_s5    { name inlet_s5; }
            inlet_s6    { name inlet_s6; }
        }

    }

//    clamp_porous
//    {
//      type triSurfaceMesh;
//      file "clamp_porous.stl";
//    }

    refinementBox1
    {
        type searchableBox;
        min (0 0 0);
        max (0.1 0.1 3);
    }
    refinementBox2
    {
        type searchableBox;
        min (7.9 0 0);
        max (8 0.1 3);
    }

};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 100000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 3000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 10;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 3;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
       {
            file "clamp.eMesh";
            level 2;
        }

    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        "clamp.*"
        {
            // Surface-wise min and max refinement level
            level (0 0);

            regions
            {
                clamp_pipe { level (4 5); patchInfo { type wall; }}
                inlet_n1  { level (6 6); patchInfo { type patch; }}
                inlet_n2  { level (6 6); patchInfo { type patch; }}
                inlet_n3  { level (6 6); patchInfo { type patch; }}
                inlet_n4  { level (6 6); patchInfo { type patch; }}
                inlet_n5  { level (6 6); patchInfo { type patch; }}
                inlet_n6  { level (6 6); patchInfo { type patch; }}
                inlet_s1  { level (6 6); patchInfo { type patch; }}
                inlet_s2  { level (6 6); patchInfo { type patch; }}
                inlet_s3  { level (6 6); patchInfo { type patch; }}
                inlet_s4  { level (6 6); patchInfo { type patch; }}
                inlet_s5  { level (6 6); patchInfo { type patch; }}
                inlet_s6  { level (6 6); patchInfo { type patch; }}
                north  { level (0 0); patchInfo { type symmetry; }}
                south  { level (0 0); patchInfo { type symmetry; }}
                ground  { level (0 0); patchInfo { type wall; }}
                clamp_cover  { level (0 0); patchInfo { type patch; }}
              }
        }

//        "clamp_porous.*"
//        {
//            // Surface-wise min and max refinement level
//            level (0 0);
//            faceZone clampPorous_face;
//            cellZone clampPorous;
//            cellZoneInside inside;
//            insidePoint (5.001 0.01 0.01);
//        }
    }

    // Resolve sharp angles
    resolveFeatureAngle 100;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
      clamp
      {
        mode inside;
        levels ((2 2));

      regions
      {
//        inlet_n1  { mode distance; levels ((1 5)); }
//        inlet_n2  { mode distance; levels ((1 5)); }
//        inlet_n3  { mode distance; levels ((0.01 1)); }
//        inlet_n4  { mode distance; levels ((0.01 1)); }
//        inlet_n5  { mode distance; levels ((0.02 1)); }
//        inlet_n6  { mode distance; levels ((0.02 1)); }
//        inlet_s1  { mode distance; levels ((-0.1 5)); }
//        inlet_s2  { mode distance; levels ((-0.1 5)); }
//        inlet_s3  { mode distance; levels ((-0.1 5)); }
      }
    }
    refinementBox1
      {
          mode inside;
          levels ((1E15 4));
      }
    refinementBox2
        {
            mode inside;
            levels ((1E15 4));
        }

    }

    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (4.05 2.05 0.55);

    //locationsOutsideMesh ((1.1 1.1 0.6));


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 5;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 1;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    // Feature snapping

        //- Number of feature edge snapping iterations.
        //  Leave out altogether to disable.
        nFeatureSnapIter 15;

        //- Detect (geometric only) features by sampling the surface
        //  (default=false).
        implicitFeatureSnap false;

        //- Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        //- Detect points on multiple surfaces (only for explicitFeatureSnap)
        multiRegionFeatureSnap true;
}



// Settings for the layer addition.
addLayersControls
{

  // Are the thickness parameters below relative to the undistorted
  // size of the refined cell outside layer (true) or absolute sizes (false).

  relativeSizes true;

  // Per final patch (so not geometry!) the layer information
    layers
    {
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 0.3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.01;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 1.7.x! (didn't do anything in 1.7.x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 80;

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 3;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 1.7.x! 90 degrees corresponds to 130
    // in 1.7.x.
    minMedianAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"


    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Format to use for lines (e.g. leak path)
setFormat ensight;


// Write flags
writeFlags
(
    scalarLevels
    layerSets
    layerFields     // write volScalarField for layer coverage
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-5;


// ************************************************************************* //
